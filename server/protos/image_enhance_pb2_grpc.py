# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import image_enhance_pb2 as image__enhance__pb2


class ImageProcessorServiceStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SplitImage = channel.unary_unary(
                '/image_enhance.ImageProcessorService/SplitImage',
                request_serializer=image__enhance__pb2.ImageRequest.SerializeToString,
                response_deserializer=image__enhance__pb2.ImagePatchesResponse.FromString,
                )
        self.MergePatches = channel.unary_unary(
                '/image_enhance.ImageProcessorService/MergePatches',
                request_serializer=image__enhance__pb2.MergedImageResponse.SerializeToString,
                response_deserializer=image__enhance__pb2.ImageRequest.FromString,
                )


class ImageProcessorServiceServicer(object):
    """The service definition.
    """

    def SplitImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MergePatches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageProcessorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SplitImage': grpc.unary_unary_rpc_method_handler(
                    servicer.SplitImage,
                    request_deserializer=image__enhance__pb2.ImageRequest.FromString,
                    response_serializer=image__enhance__pb2.ImagePatchesResponse.SerializeToString,
            ),
            'MergePatches': grpc.unary_unary_rpc_method_handler(
                    servicer.MergePatches,
                    request_deserializer=image__enhance__pb2.MergedImageResponse.FromString,
                    response_serializer=image__enhance__pb2.ImageRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'image_enhance.ImageProcessorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageProcessorService(object):
    """The service definition.
    """

    @staticmethod
    def SplitImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/image_enhance.ImageProcessorService/SplitImage',
            image__enhance__pb2.ImageRequest.SerializeToString,
            image__enhance__pb2.ImagePatchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MergePatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/image_enhance.ImageProcessorService/MergePatches',
            image__enhance__pb2.MergedImageResponse.SerializeToString,
            image__enhance__pb2.ImageRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
